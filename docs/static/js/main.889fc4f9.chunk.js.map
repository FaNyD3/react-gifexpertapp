{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAyCeA,EAtCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAuBvC,OACI,sBAAMC,SAhBW,SAACC,GAClBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OAExCN,EAAc,MASlB,SACI,uBACAO,KAAK,OACLC,MAAQT,EACRU,SAzBkB,SAAEP,GAExBF,EAAeE,EAAEQ,OAAOF,a,+BCNnBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCiBLO,EAhBK,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAE1B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QC4CFO,EAhDC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDN,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KA2BtC,OApBAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GAEFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAWGqB,EDtB0BK,CAAc1B,GAAlCa,EAJiB,EAItBN,KAAaa,EAJS,EAITA,QAgBrB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAoDhB,EAApD,OAGEoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAESA,GADCA,EAAIC,aEevBgB,EA7CM,WAAM,MAIazC,mBAAS,CAAC,UAJvB,mBAIhB0C,EAJgB,KAIJ3C,EAJI,KAkBvB,OACI,gCACI,8CAEA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAYA,GADNA,Y,MC5BlC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.889fc4f9.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\r\nimport { useState } from 'react'\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState(''); // string vacio\r\n    const handleInputChange = ( e ) => {\r\n        // console.log(e.target.value)\r\n        setInputValue( e.target.value )\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        // trim() : borra los espacios antes y despues\r\n        if( inputValue.trim().length > 2 ) {\r\n            setCategories( cats => [ inputValue, ...cats ] );\r\n            // para evitar un doble posteo se pone un string vacio\r\n            setInputValue('');\r\n        }\r\n\r\n        // console.log('submit hecho')\r\n        // setCategories se esta llamando por un callback = cats\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n            type=\"text\"\r\n            value={ inputValue }\r\n            onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","\r\n// devuelve una promesa que resuelve la condicion de las imagenes\r\nexport const getGifs = async ( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=beINULh43hDDPtgiYpgG7z9QOB2nCm01`\r\n    const resp = await fetch(url)\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n}\r\n","import React from 'react'\r\n// import PropTypes from 'prop-types'\r\n\r\nconst GifGridItem = ({ title, url }) => {\r\n    // console.log(id, title, url)\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n/*\r\nGifGridItem.propTypes = {\r\n\r\n}\r\n*/\r\n\r\nexport default GifGridItem\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    // data: nombre nuevo que se le quiere asignar\r\n    // data:NuevoNombre\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    /*    \r\n\r\n    // hace que se dispare una vez nada mÃ¡s\r\n    useEffect(() => {\r\n        // solo se ejecuta getGifs una sola vez, cuando el componente es renderizado por primera vez\r\n        getGifs( category )\r\n            // esto es igual a lo de abajo\r\n            // .then( imgs => setImages( imgs ) )\r\n            .then( setImages );\r\n    }, [ category ])\r\n    */\r\n\r\n    // getGifs();\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\r\n\r\n            {/* == true hace sino no */}\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={ img.id }\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n            </div> \r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n/*\r\nGifGrid.propTypes = {\r\n\r\n}\r\n*/\r\n\r\nexport default GifGrid\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    // la primera vez cambia la category y ahi se va a ejecutar \r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                // console.log(imgs)\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n    }, [category])\r\n\r\n    /*\r\n    setTimeout(() => {\r\n        setState({\r\n            data: [1,2,3,4,5,6,7],\r\n            loading: false\r\n        })\r\n    }, 3000);\r\n    */\r\n\r\n    return state;\r\n}\r\n\r\n","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport GifGrid from './components/GifGrid'\r\n// import PropTypes from 'prop-types'\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n\r\n    const [categories, setCategories] = useState(['Kirby'])\r\n\r\n    /*\r\n    const handleAdd = () => {\r\n        // se mantiene el arreglo y se agrega un nuevo elemento\r\n        // setCategories( [...categories, 'HunterXHunter'] );\r\n        // si quiero que 'HunterXHunter este como el primer elemento:\r\n        // hace que el elemento se agrege primero en la lista\r\n        // setCategories( ['HunterXHunter',...categories ] );\r\n        // otra alternativa\r\n        setCategories( cats => [ 'HunterXHunter',...cats ] );\r\n    }\r\n    */\r\n\r\n    return (\r\n        <div>\r\n            <h1>GifExpertApp</h1>\r\n            {/* si se borra esto setCategories ={ setCategories } sale la validacion de props isRequired */}\r\n            <AddCategory setCategories ={ setCategories } />\r\n            <hr />\r\n            {/*<button onClick={handleAdd}>Add</button>*/}\r\n            <ol>\r\n                { \r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key={ category }\r\n                            category ={ category } \r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\n/*\r\nGifExpertApp.propTypes = {\r\n\r\n}\r\n*/\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp'\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}